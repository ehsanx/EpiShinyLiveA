[{"name":"app.R","content":"library(shiny)\r\nlibrary(nhanesA)\r\nlibrary(DataExplorer)\r\nlibrary(Hmisc)\r\nlibrary(dplyr)\r\nlibrary(tableone)\r\n\r\n# UI with sidebar layout\r\nui <- fluidPage(\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      HTML(\"<p>We will work with the Demographic data component from the National Health and Nutrition Examination Survey (NHANES). We will download them directly from the US CDC website: <a href='https://wwwn.cdc.gov/Nchs/Nhanes/'>https://wwwn.cdc.gov/Nchs/Nhanes/<\/a>.<\/p>\"),\r\n      selectInput(\"dataset\", \"Select NHANES Cycle:\",\r\n                  choices = c(\"1999-2000\" = \"DEMO\",\r\n                              \"2001-2002\" = \"DEMO_B\",\r\n                              \"2003-2004\" = \"DEMO_C\",\r\n                              \"2005-2006\" = \"DEMO_D\",\r\n                              \"2007-2008\" = \"DEMO_E\",\r\n                              \"2009-2010\" = \"DEMO_F\",\r\n                              \"2011-2012\" = \"DEMO_G\",\r\n                              \"2013-2014\" = \"DEMO_H\",\r\n                              \"2015-2016\" = \"DEMO_I\",\r\n                              \"2017-2018\" = \"DEMO_J\"),\r\n                  selected = \"DEMO_H\"),\r\n      actionButton(\"loadData\", \"Download Selected Dataset\"),\r\n      uiOutput(\"variableCheckboxes\")\r\n    ),\r\n    mainPanel(\r\n      tabsetPanel(\r\n        tabPanel(\"Subset Data Info\",\r\n                 textOutput(\"subsetStatus\")\r\n        ),\r\n        tabPanel(\"Visually Exploring\",\r\n                 tags$p(\"DataExplorer package is used.\"),\r\n                 selectInput(\"plotType\", \"Select Plot Type:\",\r\n                             choices = c(\"Introduction\" = \"intro\",\r\n                                         \"Missing Data\" = \"missing\",\r\n                                         \"Histogram\" = \"histogram\",\r\n                                         \"Density Plot\" = \"density\",\r\n                                         \"Bar Plot\" = \"bar\")),\r\n                 uiOutput(\"selectedPlot\")\r\n        ),\r\n        tabPanel(\"Numerically Exploring\",\r\n                 tags$p(\"Hmisc package is used.\"),\r\n                 verbatimTextOutput(\"hmiscOutput\")\r\n        ),\r\n        tabPanel(\"Table 1\",\r\n                 tags$p(\"Create Table 1 using the tableone package.\"),\r\n                 selectInput(\"strataVar\", \"Select Strata Variable:\", choices = c(\"None\" = \"None\"), selected = \"None\"),\r\n                 actionButton(\"createTable\", \"Create Table 1\"),\r\n                 verbatimTextOutput(\"tableOneText\")  # Add this line to display the printed TableOne object\r\n        )\r\n        \r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n\r\n\r\n\r\n# Server\r\nserver <- function(input, output, session) {\r\n  rv <- reactiveValues(data = NULL, subset = NULL, translatedSubset = NULL, downloading = FALSE)\r\n  \r\n  observeEvent(input$loadData, {\r\n    withProgress(message = 'Downloading selected dataset. Please wait...', {\r\n      rv$downloading <- TRUE\r\n      incProgress(0.1)\r\n      Sys.sleep(2)  # Simulate a download delay\r\n      rv$data <- nhanes(input$dataset)\r\n      rv$downloading <- FALSE\r\n      incProgress(0.9)\r\n      \r\n      # Pre-select certain variables if they exist in the data\r\n      target_names <- c(\"RIAGENDR\", \"RIDAGEYR\", \"RIDRETH1\", \"DMDBORN4\", \"DMDMARTL\", \"RIDEXPRG\", \"DMDHHSIZ\", \"INDHHIN2\", \"INDFMPIR\")\r\n      available_names <- target_names[target_names %in% names(rv$data)]\r\n      \r\n      output$variableCheckboxes <- renderUI({\r\n        if (!is.null(rv$data)) {\r\n          checkboxGroupInput(\"selectedVars\", \"Choose Variables:\",\r\n                             choices = names(rv$data),\r\n                             selected = available_names)\r\n        }\r\n      })\r\n    })\r\n  })\r\n  \r\n  # Reactive expression for the subset based on selected variables\r\n  reactiveSubset <- reactive({\r\n    req(rv$data)\r\n    req(input$selectedVars)\r\n    subset <- rv$data %>% select(all_of(input$selectedVars))\r\n    return(subset)\r\n  })\r\n  \r\n  # Automatically translate the subset when the selected variables change\r\n  # Automatically translate the subset when the selected variables change\r\n  translatedSubset <- reactive({\r\n    req(reactiveSubset())\r\n    \r\n    # Show progress bar during translation\r\n    withProgress(message = 'Translating (recoding) the selected variables. Please wait...', {\r\n      incProgress(0.3)\r\n      Sys.sleep(1)  # Simulate translation delay\r\n      \r\n      translated <- nhanesTranslate(input$dataset, names(reactiveSubset()), data = reactiveSubset())\r\n      \r\n      incProgress(0.7)\r\n      return(translated)\r\n    })\r\n  })\r\n  \r\n  output$subsetStatus <- renderText({\r\n    paste(\"Subset created with\", length(input$selectedVars), \"variables. Selecting more variables will result in more translation/recoding time.\")\r\n  })\r\n  \r\n  output$selectedPlot <- renderUI({\r\n    req(translatedSubset())\r\n    plotType <- input$plotType\r\n    if (plotType == \"intro\") plotOutput(\"introPlot\")\r\n    else if (plotType == \"missing\") plotOutput(\"missingPlot\")\r\n    else if (plotType == \"histogram\") plotOutput(\"histogramPlot\")\r\n    else if (plotType == \"density\") plotOutput(\"densityPlot\")\r\n    else if (plotType == \"bar\") plotOutput(\"barPlot\")\r\n  })\r\n  \r\n  # DataExplorer plots using the translated subset\r\n  output$introPlot <- renderPlot({ plot_intro(translatedSubset()) })\r\n  output$missingPlot <- renderPlot({ plot_missing(translatedSubset()) })\r\n  output$histogramPlot <- renderPlot({ plot_histogram(translatedSubset()) })\r\n  output$densityPlot <- renderPlot({ plot_density(translatedSubset()) })\r\n  output$barPlot <- renderPlot({ plot_bar(translatedSubset(), maxcat = 20) })\r\n  \r\n  # Hmisc summary using the translated subset\r\n  output$hmiscOutput <- renderPrint({ describe(translatedSubset()) })\r\n  \r\n  observe({\r\n    req(input$selectedVars)  # Ensure that the selected variables are available\r\n    req(translatedSubset())\r\n    \r\n    # Identify categorical variables by checking if they are factors or if they have a limited number of unique values\r\n    categoricalVars <- sapply(translatedSubset()[, input$selectedVars, drop = FALSE], function(x) {\r\n      is.factor(x) || length(unique(x)) <= 10  # Adjust the threshold as needed\r\n    })\r\n    \r\n    # Filter the selected variables to include only those identified as categorical\r\n    categoricalVarNames <- names(categoricalVars)[categoricalVars]\r\n    \r\n    # Update the choices for the strataVar selectInput to include \"None\" and the filtered categorical variables\r\n    updatedChoices <- c(\"None\", categoricalVarNames)\r\n    updateSelectInput(session, \"strataVar\", choices = updatedChoices, selected = \"None\")\r\n  })\r\n  \r\n  \r\n  # Create Table 1 when the \"createTable\" button is clicked\r\n  observeEvent(input$createTable, {\r\n    req(translatedSubset())\r\n    strata <- if(input$strataVar != \"None\" && input$strataVar %in% names(translatedSubset())) {\r\n      input$strataVar\r\n    } else {\r\n      NULL  # Explicitly set strata to NULL if \"None\" is selected or the variable isn't in the data frame\r\n    }\r\n    \r\n    vars <- setdiff(names(translatedSubset()), strata)  # Exclude strata variable from vars\r\n    \r\n    # Call CreateTableOne with or without stratification based on strata variable selection\r\n    tab1 <- if(is.null(strata)) {\r\n      CreateTableOne(data = translatedSubset(), vars = vars, includeNA = TRUE, test = FALSE, smd = FALSE)\r\n    } else {\r\n      CreateTableOne(data = translatedSubset(), vars = vars, strata = strata, includeNA = TRUE, test = FALSE, smd = FALSE)\r\n    }\r\n    \r\n    # Use renderPrint to display the output of print(tab1, showAllLevels = TRUE)\r\n    output$tableOneText <- renderPrint({\r\n      print(tab1, showAllLevels = TRUE)\r\n    })\r\n  })\r\n  \r\n  \r\n  \r\n  \r\n}\r\n\r\n# Run the app\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
